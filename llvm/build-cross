# Copyright (c) 2018-2025, Firas Khalil Khana
# Distributed under the terms of the ISC License

# Voyager: Firas Khalil Khana (firasuke) <firasuke@glaucuslinux.org>

prepare() {
  cd "$TMPD"/$nom/$nom-project-$ver.src

  mkdir -p build
}

configure() {
  "$CERD"/cmake/files/glaucus-cmake \
    -B build \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_LINKER=mold \
    -DCLANG_DEFAULT_OBJCOPY=$nom-objcopy \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_ENABLE_ARCMT=OFF \
    -DCLANG_ENABLE_LIBXML2=OFF \
    -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
    -DCLANG_INCLUDE_TESTS=OFF \
    -DCLANG_LINK_CLANG_DYLIB=ON \
    -DCLANG_VENDOR=glaucus \
    -DCMAKE_AR=$nom-ar \
    -DCMAKE_ASM_COMPILER=clang \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DCMAKE_RANLIB=$nom-ranlib \
    -DCOMPILER_RT_BUILD_CTX_PROFILE=OFF \
    -DCOMPILER_RT_BUILD_GWP_ASAN=OFF \
    -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
    -DCOMPILER_RT_BUILD_MEMPROF=OFF \
    -DCOMPILER_RT_BUILD_PROFILE=OFF \
    -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
    -DCOMPILER_RT_BUILD_XRAY=OFF \
    -DCOMPILER_RT_CXX_LIBRARY=libcxx \
    -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=$TGT \
    -DCOMPILER_RT_DISABLE_AARCH64_FMV=OFF \
    -DCOMPILER_RT_SCUDO_STANDALONE_BUILD_SHARED=OFF \
    -DCOMPILER_RT_SUPPORTED_CXX_LIBRARIES=libcxx \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DCOMPILER_RT_USE_LLVM_UNWINDER=ON \
    -DDEFAULT_COMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DENABLE_LINKER_BUILD_ID=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_INCLUDE_BENCHMARKS=OFF \
    -DLIBCXX_INCLUDE_TESTS=OFF \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBUNWIND_ENABLE_ASSERTIONS=OFF \
    -DLIBUNWIND_ENABLE_STATIC=OFF \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLLVM_APPEND_VC_REV=OFF \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_BUILD_TELEMETRY=OFF \
    -DLLVM_DEFAULT_TARGET_TRIPLE=$TGT \
    -DLLVM_ENABLE_BINDINGS=OFF \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_LIBPFM=OFF \
    -DLLVM_ENABLE_LIBXML2=OFF \
    -DLLVM_ENABLE_LTO=Thin \
    -DLLVM_ENABLE_OCAMLDOC=OFF \
    -DLLVM_ENABLE_PROJECTS=clang \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_RUNTIMES='compiler-rt;libcxx;libcxxabi;libunwind' \
    -DLLVM_ENABLE_UNWIND_TABLES=OFF \
    -DLLVM_ENABLE_ZLIB=FORCE_ON \
    -DLLVM_ENABLE_ZSTD=FORCE_ON \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DLLVM_INCLUDE_DOCS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
    -DLLVM_INSTALL_UTILS=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_OPTIMIZED_TABLEGEN=ON \
    -DLLVM_PARALLEL_LINK_JOBS=1 \
    -DLLVM_TARGET_ARCH=X86 \
    -DLLVM_TARGETS_TO_BUILD=X86 \
    -DLLVM_USE_LINKER=mold \
    -DLLVM_USE_SANITIZER=OFF \
    -DLLVM_USE_SPLIT_DWARF=ON \
    -S $nom
}

build() {
  samu \
    -C build
}

package() {
  DESTDIR="$CRSD" \
  samu \
    -C build \
    install/strip

  ln -fs clang++ "$CRSD"/usr/bin/c++
  ln -fs clang "$CRSD"/usr/bin/cc
}
